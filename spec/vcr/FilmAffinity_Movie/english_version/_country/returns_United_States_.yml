---
http_interactions:
- request:
    method: get
    uri: https://www.filmaffinity.com/en/film504889.html
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Mon, 12 Oct 2020 21:40:45 GMT
      Server:
      - Apache
      Expires:
      - Thu, 19 Nov 1981 08:52:00 GMT
      Pragma:
      - no-cache
      Cache-Control:
      - public, max-age=0, must-revalidate
      Set-Cookie:
      - FCD=DQcwqdgbeMLYFpYRYuMRXzaR3iqBCQh9r_iTeiwczalwBnXWmYDUaTmqf_icxblQOWHXnYybB_7TK8_IhjWpj-uv3uOMMgsjta9eDWUxjQV0I6o1WloEddf7uD_VFKVdUH72_x7SE6PSLhFM-Uyrkw;
        expires=Sun, 09-Jul-2023 21:40:45 GMT; Max-Age=86400000; path=/; domain=.filmaffinity.com;
        secure; HttpOnly
      - FSID=23jaeoe95pg50e2hnfe49uugc86plu3bee78583vev9gm9k76uei0ll75hnjrlam; path=/;
        domain=.filmaffinity.com; secure; HttpOnly
      - client-data=%7B%22ism%22%3Afalse%2C%22showm%22%3Afalse%2C%22ts%22%3A1602538845%7D;
        expires=Tue, 27-Oct-2020 21:40:45 GMT; Max-Age=1296000
      - client-data=deleted; expires=Thu, 01-Jan-1970 00:00:01 GMT; Max-Age=0
      X-Frame-Options:
      - SAMEORIGIN
      Upgrade:
      - h2,h2c
      Connection:
      - Upgrade
      Vary:
      - Accept-Encoding
      X-Xss-Protection:
      - 1; mode=block
      Content-Length:
      - '14174'
      Content-Type:
      - text/html; charset=utf-8
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Mon, 12 Oct 2020 21:40:45 GMT
recorded_with: VCR 6.0.0
